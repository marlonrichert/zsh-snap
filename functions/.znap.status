#!/bin/zsh
# fetch updates & show git status
# args: [ <repo> ... ]
autoload +X -Uz is-at-least

.znap.status() {
  emulate -L zsh; setopt $_znap_opts

  private -a repos=( ~znap/$^@(D-/) )
  (( $#repos > 0 )) ||
      repos=( ~znap/*(D-/) )

  .znap.multi '.znap.status.task '${(i)^repos}
}

.znap.status.task() {
  emulate -L zsh; setopt $_znap_opts

  cd -q ~znap

  print -nr -- "${$( eval "ls -d $1:t" )%[/@]} "

  cd -q $1

  private -a git_config=()
  is-at-least 2.8 ${${=$( git --version )}[3]} &&
      git_config+=(-c fetch.parallel=0 -c submodule.fetchJobs=0)
  git ${git_config[@]} fetch -t --recurse-submodules \
        ${(s:/:)$( git rev-parse -q --abbrev-ref @{u} 2> /dev/null )} &> /dev/null ||
      return

  private rev= log="$( git log -n1 --decorate --oneline )"
  if [[ $log ==  *'tag: '* ]]; then
    private -a chunks=( ${(s.tag: .)log} )
    rev="${chunks[1]##*[ (]}${chunks[2]%%[,)]*}"$'\e[m'
  fi

  .znap.ignore $1:t '*.zwc'  # Add `*.zwc` to repo's local ignore list.

  private -aU lines=( "${(f)$( git status -sb )}" )

  private -i MBEGIN MEND
  private MATCH
  private -aU changes=( ${(0)${${(F)lines[2,-1]}// [[:print:]]#($'\n'|)}//$'m\C-['/$'m\0\C-['} )
  changes=( ${(@)changes[@]//(#m)('??'|'!!')/$MATCH[1]} )

  private ahead_behind=${${(M)lines[1]% \[*\]}# }
  [[ -z $ahead_behind && -z $changes ]] &&
      ahead_behind=$'\e[32mâœ“\e[39m'

  print -r -- $rev ${${${lines[1]#'## '}%...*}:#*(main|master)*} $ahead_behind $changes
}

.znap.status "$@"
