#!/bin/zsh
# cache & eval output of command
# args: ( <repo> | <name> ) <command>
zmodload -F zsh/files b:zf_mkdir

# TODO: deprecate this and provide `znap cache <key> <command>` instead.

if (( $# < 2 )); then
  print -u2 'znap eval: not enough arguments'
  .znap.help eval
  return $(( sysexits[(i)USAGE] + 63 ))
fi

local gitdir=''
..znap.repos-dir

if [[ $1 == */* ]]; then
  .znap.clone $1 ||
      return
  private _P__repo=~[$1]
  private _P__name=${_P__repo#$gitdir/}
else
  local _P__name=$1 _P__repo=
fi
private _P__cmd=$2

private _P__cache_dir=
private _P__cache_file=$XDG_CACHE_HOME/zsh-snap/eval/${_P__name}.zsh
zf_mkdir -pm 0700 $_P__cache_file:h

[[ -r $_P__cache_file ]] ||
    print -r "znap eval: generating cache for ${(q+)_P__cmd}"

private _P__line= _P__header="#${(q+)_P__cmd}" _P__index=$_P__repo/.git/index
(
  [[ -r $_P__cache_file ]] &&
      IFS='' read -r _P__line < $_P__cache_file

  if [[ $_P__line != $_P__header ]] ||
      [[ -n $_P__repo && -f $_P__index && $_P__index -nt $_P__cache_file ]]; then
    [[ -d $_P__repo ]] &&
        builtin cd -q -- $_P__repo
    print -r -- "$_P__header" >! $_P__cache_file
    eval "$_P__cmd" >>! $_P__cache_file
    .znap.compile $_P__cache_file
  fi
)

# Wrap in a named function for profiling purposes.
.znap.eval:${_P__cache_file:t}() {
  . "$1"
}
{
  .znap.eval:${_P__cache_file:t} "$_P__cache_file"
} always {
  TRY_BLOCK_ERROR=
  unfunction .znap.eval:${_P__cache_file:t}
}
