#!/bin/zsh
# update repos in parallel
# args: [ <repo> ... ]
zmodload -F zsh/files b:zf_ln b:zf_rm
autoload +X -Uz is-at-least

.znap.pull() {
  emulate -L zsh; setopt $_znap_opts

  local bindir=~/.local/bin
  local fdir=${XDG_DATA_HOME:-~/.local/share}/zsh/site-functions

  private -a bugs=(
      $bindir/*.*(@-*)
      $bindir/*(@-^*)
      $bindir/*(-@)
      $fdir/*.zwc
      $fdir/*(-@)
  )

  private b=
  for b in $bugs[@]; do
    [[ $b:P == ~znap/*/* ]] &&
        zf_rm $b
  done

  private -a repos=( ~znap/$^@(D-/) )
  (( ${#repos} )) ||
      repos=( ~znap/*(D-/) )

  if is-at-least 2.31 ${${=$( git --version )}[3]}; then
    local -a match=() mbegin=() mend=()
    local r
    for r in $repos; do
      if zstyle -T :znap:pull:${r:t} git-maintenance; then
        git -C $r maintenance start &> /dev/null
      else
        git -C $r maintenance unregister &> /dev/null
      fi
    done
  fi

  local -a git_config=()
  is-at-least 2.8 ${${=$( git --version )}[3]} &&
      git_config+=(-c fetch.parallel=0 -c submodule.fetchJobs=0)
  {
    .znap.multi '.znap.pull.task '${(i)^repos}
  } always {
    print -n '\r'
    .znap.compile ${XDG_DATA_HOME:-~/.local/share}/zsh/site-functions
  }
}

.znap.pull.task() {
  emulate -L zsh; setopt $_znap_opts

  cd -q $1

  .znap.ignore $1:t '*.zwc'  # Add `*.zwc` to repo's local ignore list.

  private -a upstream=( ${(s:/:)$( git rev-parse -q --abbrev-ref @{u} 2> /dev/null )} )
  private msg=

  if ! msg="$( git ${git_config[@]} fetch -t --recurse-submodules $upstream[@] 2>&1 )"; then
    print -n '\r'
    .znap.status $1:t
    print -nP '\r%F{red}'
    print -r -- "$msg"
    print -nP '%f'
    return
  fi

  print -n .

  private -a count=()
  if count=( ${="$( git rev-list --count --left-right @{u}...@ 2> /dev/null )"} ) &&
      (( count[1] )); then

    cd -q ~znap
    print -nr -- $'\r'"${$( eval "ls -d $1:t" )%[/@]} "
    cd -q $1

    ..znap.tput el  # Clear to end of line.

    if ! git diff --quiet @; then
      print -P '%F{red}dirty%f'
      return 1
    fi

    msg="$(
        git ${git_config[@]} pull -q -r --autostash --recurse-submodules $upstream[@] 2>&1 > /dev/null
    )"
    private err=$?

    print -n '\r'
    .znap.status $1:t
    if (( err )); then
      print -nP '\r%F{red}'
      print -r -- "$msg"
      print -nP '%f'
    else
      private cache_dir=$XDG_CACHE_HOME/zsh-snap
      zf_rm -f -- $_comp_dumpfile $cache_dir/fpath/_$1:t $cache_dir/eval/${1:t}.zsh
      .znap.compile $1 &> /dev/null &|

      private -i installed=0
      private link= orig= opt=
      for link in $bindir/*~*.zwc(@) $fdir/*~*.zwc(@); do
        orig=$link:P
        if [[ $orig == $1/* ]]; then
          if ! [[ -e $orig ]]; then
            zf_rm -f -- $link
            continue
          fi
          if [[ $orig == $bindir/* && -x $orig ]]; then
            installed=1
          elif [[ $orig == $fdir/* ]]; then
            local REPLY
            IFS='' read -r < $orig
            if  [[ $orig == $fdir/_* &&
                   $REPLY == (\#|autoload |emulate )* ]] ||
                [[ $orig == $fdir/[^[:punct:][:upper:]][^.]## &&
                   $REPLY == \#(autoload|compdef)\ * ]]; then
              installed=1
            fi
          fi
          .znap.compile $orig
        fi
      done

      (( installed )) &&
          .znap.install $1:t
    fi
  fi
}

.znap.pull "$@"
